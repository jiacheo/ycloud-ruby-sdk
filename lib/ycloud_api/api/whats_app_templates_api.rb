=begin
#YCloud API

#The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

The version of the OpenAPI document: v2
Contact: service@ycloud.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: unset

=end

require 'cgi'

module YCloudApiClient
  class WhatsAppTemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a WhatsApp template
    # Creates a WhatsApp template. See also [Create Message Templates](https://developers.facebook.com/docs/whatsapp/business-management-api/message-templates/#create-message-templates).
    # @param whatsapp_template_create_request [WhatsappTemplateCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [WhatsappTemplate]
    def whatsapp_template_create(whatsapp_template_create_request, opts = {})
      data, _status_code, _headers = whatsapp_template_create_with_http_info(whatsapp_template_create_request, opts)
      data
    end

    # Create a WhatsApp template
    # Creates a WhatsApp template. See also [Create Message Templates](https://developers.facebook.com/docs/whatsapp/business-management-api/message-templates/#create-message-templates).
    # @param whatsapp_template_create_request [WhatsappTemplateCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhatsappTemplate, Integer, Hash)>] WhatsappTemplate data, response status code and response headers
    def whatsapp_template_create_with_http_info(whatsapp_template_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatsAppTemplatesApi.whatsapp_template_create ...'
      end
      # verify the required parameter 'whatsapp_template_create_request' is set
      if @api_client.config.client_side_validation && whatsapp_template_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'whatsapp_template_create_request' when calling WhatsAppTemplatesApi.whatsapp_template_create"
      end
      # resource path
      local_var_path = '/whatsapp/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(whatsapp_template_create_request)

      # return_type
      return_type = opts[:debug_return_type] || 'WhatsappTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"WhatsAppTemplatesApi.whatsapp_template_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatsAppTemplatesApi#whatsapp_template_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete WhatsApp templates by name
    # Deletes WhatsApp templates by name. If that template name exists in multiple languages, all languages will be deleted. HTTP status `404` is returned if no templates are found for the specific name.
    # @param waba_id [String] WhatsApp Business Account ID.
    # @param name [String] Name of the template.
    # @param [Hash] opts the optional parameters
    # @return [Array<WhatsappTemplate>]
    def whatsapp_template_delete_by_name(waba_id, name, opts = {})
      data, _status_code, _headers = whatsapp_template_delete_by_name_with_http_info(waba_id, name, opts)
      data
    end

    # Delete WhatsApp templates by name
    # Deletes WhatsApp templates by name. If that template name exists in multiple languages, all languages will be deleted. HTTP status &#x60;404&#x60; is returned if no templates are found for the specific name.
    # @param waba_id [String] WhatsApp Business Account ID.
    # @param name [String] Name of the template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WhatsappTemplate>, Integer, Hash)>] Array<WhatsappTemplate> data, response status code and response headers
    def whatsapp_template_delete_by_name_with_http_info(waba_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatsAppTemplatesApi.whatsapp_template_delete_by_name ...'
      end
      # verify the required parameter 'waba_id' is set
      if @api_client.config.client_side_validation && waba_id.nil?
        fail ArgumentError, "Missing the required parameter 'waba_id' when calling WhatsAppTemplatesApi.whatsapp_template_delete_by_name"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling WhatsAppTemplatesApi.whatsapp_template_delete_by_name"
      end
      pattern = Regexp.new(/[a-z0-9]{1,512}/)
      if @api_client.config.client_side_validation && name !~ pattern
        fail ArgumentError, "invalid value for 'name' when calling WhatsAppTemplatesApi.whatsapp_template_delete_by_name, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/whatsapp/templates/{wabaId}/{name}'.sub('{' + 'wabaId' + '}', CGI.escape(waba_id.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<WhatsappTemplate>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"WhatsAppTemplatesApi.whatsapp_template_delete_by_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatsAppTemplatesApi#whatsapp_template_delete_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List WhatsApp templates
    # Returns a paginated list of WhatsApp templates you've previously created.
    # @param [Hash] opts the parameters
    # @option opts [Integer] :page Page number of the results to be returned, 1-based. (default to 1)
    # @option opts [Integer] :limit A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10. (default to 10)
    # @option opts [Boolean] :include_total Return results inside an object that contains the total result count or not. (default to false)
    # @option opts [String] :filter_waba_id WhatsApp Business Account ID.
    # @option opts [String] :filter_name Name of the template.
    # @option opts [String] :filter_language Language of the template.
    # @return [WhatsappTemplatePage]
    def whatsapp_template_list(opts = {})
      data, _status_code, _headers = whatsapp_template_list_with_http_info(opts)
      data
    end

    # List WhatsApp templates
    # Returns a paginated list of WhatsApp templates you&#39;ve previously created.
    # @param [Hash] opts the parameters
    # @option opts [Integer] :page Page number of the results to be returned, 1-based. (default to 1)
    # @option opts [Integer] :limit A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10. (default to 10)
    # @option opts [Boolean] :include_total Return results inside an object that contains the total result count or not. (default to false)
    # @option opts [String] :filter_waba_id WhatsApp Business Account ID.
    # @option opts [String] :filter_name Name of the template.
    # @option opts [String] :filter_language Language of the template.
    # @return [Array<(WhatsappTemplatePage, Integer, Hash)>] WhatsappTemplatePage data, response status code and response headers
    def whatsapp_template_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatsAppTemplatesApi.whatsapp_template_list ...'
      end
      # unbox the parameters from the hash
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling WhatsAppTemplatesApi.whatsapp_template_list, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling WhatsAppTemplatesApi.whatsapp_template_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling WhatsAppTemplatesApi.whatsapp_template_list, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling WhatsAppTemplatesApi.whatsapp_template_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'filter_name'].nil? && opts[:'filter_name'].to_s.length > 512
        fail ArgumentError, 'invalid value for "opts[:"filter_name"]" when calling WhatsAppTemplatesApi.whatsapp_template_list, the character length must be smaller than or equal to 512.'
      end

      pattern = Regexp.new(/[a-z0-9]{1,512}/)
      if @api_client.config.client_side_validation && !opts[:'filter_name'].nil? && opts[:'filter_name'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"filter_name\"]' when calling WhatsAppTemplatesApi.whatsapp_template_list, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/whatsapp/templates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'includeTotal'] = opts[:'include_total'] if !opts[:'include_total'].nil?
      query_params[:'filter.wabaId'] = opts[:'filter_waba_id'] if !opts[:'filter_waba_id'].nil?
      query_params[:'filter.name'] = opts[:'filter_name'] if !opts[:'filter_name'].nil?
      query_params[:'filter.language'] = opts[:'filter_language'] if !opts[:'filter_language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WhatsappTemplatePage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"WhatsAppTemplatesApi.whatsapp_template_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatsAppTemplatesApi#whatsapp_template_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a WhatsApp template
    # Retrieves a WhatsApp template by name and language.
    # @param waba_id [String] WhatsApp Business Account ID.
    # @param name [String] Name of the template.
    # @param language [String] Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages-) for all codes.
    # @param [Hash] opts the optional parameters
    # @return [WhatsappTemplate]
    def whatsapp_template_retrieve_by_name_and_language(waba_id, name, language, opts = {})
      data, _status_code, _headers = whatsapp_template_retrieve_by_name_and_language_with_http_info(waba_id, name, language, opts)
      data
    end

    # Retrieve a WhatsApp template
    # Retrieves a WhatsApp template by name and language.
    # @param waba_id [String] WhatsApp Business Account ID.
    # @param name [String] Name of the template.
    # @param language [String] Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages-) for all codes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhatsappTemplate, Integer, Hash)>] WhatsappTemplate data, response status code and response headers
    def whatsapp_template_retrieve_by_name_and_language_with_http_info(waba_id, name, language, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatsAppTemplatesApi.whatsapp_template_retrieve_by_name_and_language ...'
      end
      # verify the required parameter 'waba_id' is set
      if @api_client.config.client_side_validation && waba_id.nil?
        fail ArgumentError, "Missing the required parameter 'waba_id' when calling WhatsAppTemplatesApi.whatsapp_template_retrieve_by_name_and_language"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling WhatsAppTemplatesApi.whatsapp_template_retrieve_by_name_and_language"
      end
      pattern = Regexp.new(/[a-z0-9]{1,512}/)
      if @api_client.config.client_side_validation && name !~ pattern
        fail ArgumentError, "invalid value for 'name' when calling WhatsAppTemplatesApi.whatsapp_template_retrieve_by_name_and_language, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'language' is set
      if @api_client.config.client_side_validation && language.nil?
        fail ArgumentError, "Missing the required parameter 'language' when calling WhatsAppTemplatesApi.whatsapp_template_retrieve_by_name_and_language"
      end
      # resource path
      local_var_path = '/whatsapp/templates/{wabaId}/{name}/{language}'.sub('{' + 'wabaId' + '}', CGI.escape(waba_id.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'language' + '}', CGI.escape(language.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WhatsappTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"WhatsAppTemplatesApi.whatsapp_template_retrieve_by_name_and_language",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatsAppTemplatesApi#whatsapp_template_retrieve_by_name_and_language\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

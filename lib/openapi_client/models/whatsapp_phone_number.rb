=begin
#YCloud API

#The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.

The version of the OpenAPI document: v2
Contact: service@ycloud.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module OpenapiClient
  # A WhatsApp Business Account (WABA) phone number. See also [WhatsApp Retrieve Phone Numbers](https://developers.facebook.com/docs/whatsapp/business-management-api/manage-phone-numbers).
  class WhatsappPhoneNumber
    # Phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
    attr_accessor :phone_number

    # Display phone number.
    attr_accessor :display_phone_number

    # WhatsApp Business Account ID.
    attr_accessor :waba_id

    attr_accessor :quality_rating

    # Messaging limits determine the maximum number of business-initiated conversations each phone number can start in a rolling 24-hour period. See also [Messaging Limits](https://developers.facebook.com/docs/whatsapp/messaging-limits#messaging-limits). - `TIER_50`: 50 business-initiated conversations in a rolling 24-hour period. - `TIER_250`: 250 business-initiated conversations in a rolling 24-hour period. - `TIER_1K`: 1K business-initiated conversations with unique customers in a rolling 24-hour period. - `TIER_10K`: 10K business-initiated conversations with unique customers in a rolling 24-hour period. - `TIER_100K`: 100K business-initiated conversations with unique customers in a rolling 24-hour period. - `TIER_UNLIMITED`: An unlimited number of business-initiated conversations in a rolling 24-hour period.
    attr_accessor :messaging_limit

    # Verified name.
    attr_accessor :verified_name

    attr_accessor :code_verification_status

    attr_accessor :status

    attr_accessor :name_status

    attr_accessor :new_name_status

    # Decision. See [Phone Number Name Update](https://developers.facebook.com/docs/graph-api/webhooks/reference/whatsapp-business-account/#phone_number_name_update).
    attr_accessor :decision

    # Last requested verified name. See [Phone Number Name Update](https://developers.facebook.com/docs/graph-api/webhooks/reference/whatsapp-business-account/#phone_number_name_update).
    attr_accessor :requested_verified_name

    # Rejection reason. See [Phone Number Name Update](https://developers.facebook.com/docs/graph-api/webhooks/reference/whatsapp-business-account/#phone_number_name_update).
    attr_accessor :rejection_reason

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'phone_number' => :'phoneNumber',
        :'display_phone_number' => :'displayPhoneNumber',
        :'waba_id' => :'wabaId',
        :'quality_rating' => :'qualityRating',
        :'messaging_limit' => :'messagingLimit',
        :'verified_name' => :'verifiedName',
        :'code_verification_status' => :'codeVerificationStatus',
        :'status' => :'status',
        :'name_status' => :'nameStatus',
        :'new_name_status' => :'newNameStatus',
        :'decision' => :'decision',
        :'requested_verified_name' => :'requestedVerifiedName',
        :'rejection_reason' => :'rejectionReason'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'phone_number' => :'String',
        :'display_phone_number' => :'String',
        :'waba_id' => :'String',
        :'quality_rating' => :'WhatsappPhoneNumberQualityRating',
        :'messaging_limit' => :'String',
        :'verified_name' => :'String',
        :'code_verification_status' => :'WhatsappPhoneNumberCodeVerificationStatus',
        :'status' => :'WhatsappPhoneNumberStatus',
        :'name_status' => :'WhatsappPhoneNumberNameStatus',
        :'new_name_status' => :'WhatsappPhoneNumberNameStatus',
        :'decision' => :'String',
        :'requested_verified_name' => :'String',
        :'rejection_reason' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::WhatsappPhoneNumber` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::WhatsappPhoneNumber`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.key?(:'display_phone_number')
        self.display_phone_number = attributes[:'display_phone_number']
      end

      if attributes.key?(:'waba_id')
        self.waba_id = attributes[:'waba_id']
      end

      if attributes.key?(:'quality_rating')
        self.quality_rating = attributes[:'quality_rating']
      end

      if attributes.key?(:'messaging_limit')
        self.messaging_limit = attributes[:'messaging_limit']
      end

      if attributes.key?(:'verified_name')
        self.verified_name = attributes[:'verified_name']
      end

      if attributes.key?(:'code_verification_status')
        self.code_verification_status = attributes[:'code_verification_status']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'name_status')
        self.name_status = attributes[:'name_status']
      end

      if attributes.key?(:'new_name_status')
        self.new_name_status = attributes[:'new_name_status']
      end

      if attributes.key?(:'decision')
        self.decision = attributes[:'decision']
      end

      if attributes.key?(:'requested_verified_name')
        self.requested_verified_name = attributes[:'requested_verified_name']
      end

      if attributes.key?(:'rejection_reason')
        self.rejection_reason = attributes[:'rejection_reason']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          phone_number == o.phone_number &&
          display_phone_number == o.display_phone_number &&
          waba_id == o.waba_id &&
          quality_rating == o.quality_rating &&
          messaging_limit == o.messaging_limit &&
          verified_name == o.verified_name &&
          code_verification_status == o.code_verification_status &&
          status == o.status &&
          name_status == o.name_status &&
          new_name_status == o.new_name_status &&
          decision == o.decision &&
          requested_verified_name == o.requested_verified_name &&
          rejection_reason == o.rejection_reason
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [phone_number, display_phone_number, waba_id, quality_rating, messaging_limit, verified_name, code_verification_status, status, name_status, new_name_status, decision, requested_verified_name, rejection_reason].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
